/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.2.15.v202501011835.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0/commonapi/app/AppDBusProxy.hpp>

namespace v0 {
namespace commonapi {
namespace app {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createAppDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< AppDBusProxy>(_address, _connection);
}

void initializeAppDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        App::getInterface(),
        &createAppDBusProxy);
}

INITIALIZER(registerAppDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeAppDBusProxy);
}

AppDBusProxy::AppDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
{
}

AppDBusProxy::~AppDBusProxy() {
    completed_.set_value();
}



void AppDBusProxy::sayHello(std::string _name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_message(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
    CommonAPI::DBus::DBusProxyHelper<
        CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment >
        >,
        CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
        >
        >::callMethodWithReply(
        *this,
        "sayHello",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_name,
        _internalCallStatus,
        deploy_message);
    _message = deploy_message.getValue();
}

std::future<CommonAPI::CallStatus> AppDBusProxy::sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_message(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
    return CommonAPI::DBus::DBusProxyHelper<
        CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment >
        >,
        CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
        >
        >::callMethodAsync(
        *this,
        "sayHello",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment > _message) {
            if (_callback)
                _callback(_internalCallStatus, _message.getValue());
        },
        std::make_tuple(deploy_message));
}


void AppDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> AppDBusProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace app
} // namespace commonapi
} // namespace v0
